import { Request, Response } from "express";
import { getPage, responseAPI, responseAPITable } from "../../utils";
import { prismaClient } from "../../config";
import { QueryParams } from "../../dto";
import { IQuery } from "../../types/data.type";
import { validateToken } from "../auth/auth.controller";
import { BodyCreateBrand } from "../../../dto/brand.dto";

export const createBrand = async (req: Request, res: Response) => {
    try {
        const tokenHead = req.headers['authorization']?.split(' ')[1] as string;
        const user = await validateToken(tokenHead);
        if (!user) {
            responseAPI(res, {
                status: 401,
                message: 'Unauthorized',
            });
            return;
        }

        const body = req.body as BodyCreateBrand[];

        if (!body || body.length === 0) {
            responseAPI(res, {
                status: 400,
                message: 'No data provided',
            });
        }

        const invalidItem = body.find(
            item => typeof item !== 'object' || typeof item.name !== 'string' || item.name.trim() === ''
        )

        if (invalidItem) {
            responseAPI(res, {
                status: 400,
                message: 'Invalid data format. Each item must be an object with a non-empty "name" string.',
            });
        }

        const inputNames = body.map(p => p.name.trim().toLowerCase())

        const existing = await prismaClient.product.findMany({
            where: {
                name: {
                    in: inputNames,
                    mode: 'insensitive', // agar tidak case sensitive
                },
            }
        });

        if (existing.length > 0) {
            return responseAPI(res, {
                status: 400,
                message: 'Brand already exists!',
            });
        }

        await Promise.all(
            body.map(item =>
            prismaClient.brand.create({
                data: {
                    name: item.name.trim(),
                    createdBy: { connect: { id: user.id } },
                    updatedBy: { connect: { id: user.id } },
                },
            })
            )
        );

        responseAPI(res, {
            status: 200,
            message: 'Brand created successfully',
        });
    } catch (error) {
        responseAPI(res, {
            status: 500,
            message: 'Internal server error',
        });
    }
}

export const getAllBrand = async (req: Request, res: Response) => {
    try {
        const queryParams = req.query as QueryParams;
        let queryTable = {
            select: {
                id: true,
                name: true,
                createdAt: true,
                updatedAt: true,
                createdBy: {
                    select: {
                        id: true,
                        name: true,
                    }
                },
                updatedBy: {
                    select: {
                        id: true,
                        name: true,
                    }
                }
            },
        } as IQuery;

        if (queryParams.page || queryParams.limit) {
            const paramPage = queryParams.page ? Number(queryParams.page) : 1;
            const paramLimit = queryParams.limit ? Number(queryParams.limit) : 10;
            const page = getPage(paramPage,paramLimit);
            queryTable = {
                ...queryTable,
                skip: page.skip,
                take: page.take,
            }
        }

        const brands = await prismaClient.brand.findMany(queryTable);
        const totalRecords = await prismaClient.brand.count();
        responseAPITable(res, {
            status: 200,
            message: 'Get all brands successfully',
            data: {
                totalRecords,
                data: brands,
            },
        });

    } catch (error) {
        responseAPI(res, {
            status: 500,
            message: 'Internal server error',
        });
    }
}